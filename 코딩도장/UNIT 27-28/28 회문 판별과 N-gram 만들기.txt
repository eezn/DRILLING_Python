28. 회문 판별과 N-gram 만들기

28.1 회문 판별하기
"level", "SOS", "rotator", "nurses run"


28.1.1 반복문으로 문자 검사하기

word = input('단어를 입력하세요: ')

is_palindrome = True
for i in range(len(word) // 2):
    if word[i] != word[-1 -i]:
        is_palindrome = False
        break

print(is_palindrome)


28.1.2 시퀀스 뒤집기로 문자 검사하기

word = input('단어를 입력하세요: ')

print(word == word[::-1])


28.1.3 리스트와 reversed 사용하기

word = 'level'
list(word) == list(reversed(word))


28.1.4 문자열의 join 메서드와 reversed 사용하기

word = 'level'
word == ''.join(reversed(word))




28.2 N-gram 만들기

28.2.1 반복문으로 N-gram 출력하기

text = 'Hello'

# 2-gram이므로 문자열의 끝에서 한 글자 앞까지만 반복함
for i in range(len(text) - 1):
    print(text[i], text[i+1], sep='')

# 3-gram
for i in range(len(text) - 2):
    print(text[i], text[i+1], text[i+2], sep='')

# 단어 단위 N-gram
text = 'this is python script'
words = text.split()

for i in range(len(words) - 1):
    print(words[i], words[i+1])



28.2.2 zip으로 2-gram 만들기
text = 'hello'

two_gram = zip(text, text[1:])
for i in two_gram:
    print(i[0], i[1], sep='')

# h e l l o
#   h e l l o
# 0 1 1 1 1 0
# [('h', 'e'), ('e', 'l'), ('l', 'l'), ('l', 'o')]


text = ' this is python script'
words = text.split()
list(zip(words, words[1:]))



28.2.3 zip과 리스트 표현식으로 N-gram 만들기
text = 'hello'
[text[i:] for i in range(3)]
# ['hello', 'ello', 'llo'] : 3-gram에 필요한 슬라이스 text, text[1:], text[2:] 로 나누는 거랑 같다.

list(zip(['hello', 'ello', 'llo']))
# [('hello',), ('ello',), ('llo',)]
# 결과가 이상함 zip은 반복 가능한 객체를 여러 개 콤마로 구분해줘야 함. ['hello', 'ello', 'llo']는 요소 3개짜리 리스트 1개

list(zip(*['hello', 'ello', 'llo']))
# [('h', 'e', 'l'), ('e', 'l', 'l'), ('l', 'l', 'o')]

- list(zip(*[text[i:] for i in range(3)]))
- 리스트에 *를 붙이는 방법 : 언패킹(list unpacking)