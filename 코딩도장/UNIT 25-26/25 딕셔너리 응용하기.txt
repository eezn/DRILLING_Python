25.1 딕셔너리 조작하기


25.1.1 딕셔너리에 키-값 쌍 추가하기

- setdefault : 키-값 쌍 추가
- update : 키의 값 수정, 키가 없으면 키-값 쌍 추가


25.1.2 딕셔너리에 키와 기본값 저장하기

x = {'a':10, 'b':20, 'c':30, 'd':40}
x.setdefault('e')
x.setdefault('f', 100)


25.1.3 딕셔너리에서 키의 값 수정하기

- update(키=값) : 키가 문자열일 때

x = {'a':10, 'b':20, 'c':30, 'd':40}
x.update(a=90)
x.update(e=50)
x.update(a=900, f=60)

- update(딕셔너리)
y = {1: 'one', 2: 'two'}
y.update({1: 'ONE', 3: 'THREE'})

- update(리스트), update(튜플) : [[키1, 값1], [키2, 값2]], ((키1, 값1), (키2, 값2))
y.update([[2, 'TWO'], [4, 'FOUR']])

- update(반복가능한객체)
y.update(zip([1, 2], ['one', 'two']))


25.1.4 딕셔너리에서 키-값 쌍 삭제하기

- pop(키)
x = {'a':10, 'b':20, 'c':30, 'd':40}
x.pop('a')

- pop(키, 기본값)

- del[키]
x = {'a':10, 'b':20, 'c':30, 'd':40}
del x['a']


25.1.5 딕셔너리에서 임의의 키-값 쌍 삭제하기

- popitem() : 임의의 키-값 쌍을 삭제한 뒤 삭제한 키-값 쌍을 튜플로 반환 (3.6 이상에서는 마지막 키-값 쌍 삭제)
x = {'a':10, 'b':20, 'c':30, 'd':40}
x.popitem()


25.1.6 딕셔너리의 모든 키-값 쌍을 삭제하기

- clear()
x = {'a':10, 'b':20, 'c':30, 'd':40}
x.clear()


25.1.7 딕셔너리에서 키의 값을 가져오기

- get(키)
x = {'a':10, 'b':20, 'c':30, 'd':40}
x.get('a')

- get(키, 기본값)


25.1.8 딕셔너리에서 키-값 쌍을 모두 가져오기 : for문 조합

- items()
- keys()
- values()

x.items()
x.keys()
x.values()


25.1.9 리스트와 튜플로 딕셔너리 만들기

keys = ['a', 'b', 'c', 'd']
x = dict.fromkeys(keys)

- dict.fromkeys(키리스트, 값)
y = dict.fromkeys(keys, 100)




25.2 반복문으로 딕셔너리의 키-값 쌍을 모두 출력하기

x = {'a':10, 'b':20, 'c':30, 'd':40}
for i in x:
    print(i, end=' ')

- for 키, 값 in 딕셔너리.items():
    반복할 코드

x = {'a':10, 'b':20, 'c':30, 'd':40}
for key, value in x.items():
    print(key, value)


25.2.1 딕셔너리의 키만 출력하기

x = {'a':10, 'b':20, 'c':30, 'd':40}
for key in x.keys():
    print(key, end=' ')


25.2.2 딕셔너리의 값만 출력하기

x = {'a':10, 'b':20, 'c':30, 'd':40}
for value in x.values():
    print(value, end=' ')



25.3 딕셔너리 표현식 사용하기 : 복잡하기만 하고 dict.fromkeys 함수랑 다를게 별로 없음. 특정 값을 찾아서 삭제할 때 유용

- {키:값 for 키, 값 in 딕셔너리}
- dict({키:값 for 키, 값 in 딕셔너리})

keys = ['a', 'b', 'c', 'd']
x = {key:value for key, value in dict.fromkeys(keys).items()}
x = {key:value for key, value in dict.fromkeys(keys, 100).items()}
x = {value:key for key, value in x = {'a':10, 'b':20, 'c':30, 'd':40}.items()} # 키-값 자리 바꿈


25.3.1 딕셔너리 표현식에서 if 조건문 사용하기
딕셔너리 표현식 - 복잡하기만 하고 dict.fromkeys 함수랑 다를게 별로 없음. 
특정 값을 찾아서 삭제할 때 유용

x = {'a':10, 'b':20, 'c':30, 'd':40}
for key, value in x.items():
    if value == 20:
        del x[key]
print(x)
-> RuntimeError: dictionary changed size during iteration


- {키:값 for 키, 값 in 딕셔너리 if 조건식}
- dict({키:값 for 키, 값 in 딕셔너리 if 조건식})

x = {'a':10, 'b':20, 'c':30, 'd':40}
x = {key:value for key, value in x.items() if value != 20}


25.4 딕셔너리 안에서 딕셔너리 사용하기 (중첩 딕셔너리)

- 딕셔너리 = {키1:{키A:값A}, 키2:{키B:값B}}

terrestrial_planet = {
    'Mercury':{
        'mean_radius':2439.7,
        'mass':3.3022E+23,
        'orbital_period':87.969
    },
    'Venus':{
        'mean_radius':6051.8,
        'mass':4.8676E+24,
        'orbital_period':224.70069
    },
    'Earth':{
        'mean_radius':6371.0,
        'mass':5.97219E+24,
        'orbital_period':365.25641
    },
    'Mars':{
        'mean_radius':3389.5,
        'mass':6.4185E+23,
        'orbital_period':686.9600
    }
}
print(terrestrial_planet['Venus']['mean_radius']) # 6051.8



25.5 딕셔너리의 할당과 복사

x = {'a':10, 'b':20, 'c':30, 'd':40}
y = x
x is y # True

x = {'a':10, 'b':20, 'c':30, 'd':40}
y = x.copy()
x is y # False
x == y # True


25.5.1 중첩 딕셔너리의 할당과 복사 알아보기 - copy 모듈 deepcopy()

x = {'a':{'python':'2.7'}, 'b':{'python':'3.6'}}
y = x.copy()
y['a']['python'] = '2.7.15'

>>> x
{'a': {'python': '2.7.15'}, 'b': {'python': '3.6'}}
>>> y
{'a': {'python': '2.7.15'}, 'b': {'python': '3.6'}}


x = {'a':{'python':'2.7'}, 'b':{'python':'3.6'}}
import copy
y = copy.deepcopy(x)
y['a']['python'] = '2.7.15'

>>> x
{'a': {'python': '2.7'}, 'b': {'python': '3.6'}}
>>> y
{'a': {'python': '2.7.15'}, 'b': {'python': '3.6'}}