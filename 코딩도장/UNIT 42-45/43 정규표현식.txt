----- regular expression
: 일정한 규칙(패턴)을 가진 문자열을 표현하는 방법


----- 43.1 문자열 판단하기
regular expression -> re.match('패턴', '문자열')

import re
re.match('Hello', 'Hello, world!')
re.match('Python', 'Hello, world!')

----- 43.1.1 문자열이 맨 앞에 오는지 맨 뒤에 오는지 판단하기
- ^문자열
- 문자열$

re.match('^Hello', 'Hello, world!')
re.match('world!$', 'Hello, world!')

----- 43.1.2 지정된 문자열이 하나라도 포함되는지 판단하기

re.match('Hello:world', 'Hello')

----- 43.2 범위 판단하기
- [0-9]* # *는 문자(숫자)가 0개 이상 있는지
- [0-9]+ # +는 1개 이상 있는지 판단

re.match('[0-9]*', '1234')
re.match('[0-9]+', '1234')
re.match('[0-9]+', 'abcd')

----- 43.2.1 문자가 한 개만 있는지 판단하기
- 문자? # 0 or 1 개 판단
- 문자. # 1개인지 판단

re.match('H?', 'H')
re.match('H?', 'Hi')
re.match('H.', 'Hi')

----- 43.2.2 문자 개수 판단하기
- 문자{개수}
- (문자열){개수}

re.match('h{3}', 'hhhello')
re.match('(hello){3}, 'hellohellohelloworld')

- [0-9]{개수}

re.mathc('[0-9]{3}-[0-9{4}-[0-9]{4}', '010-1000-1000')
re.mathc('[0-9]{3}-[0-9{4}-[0-9]{4}', '010-1000-100')

- (문자){시작개수,끝개수}
- (문자열){시작개수,끝개수}
- [0-9]{시작개수, 끝개수}

re.match('[0-9]{2,3}-[0-9]{3,4}-[0-9]{4}', '02-100-1000')
re.match('[0-9]{2,3}-[0-9]{3,4}-[0-9]{4}', '02-10-1000')

----- 43.2.4 숫자와 영문 문자를 조합해서 판단하기

- a-z
- A-Z

re.match('[a-zA-Z0-9]+', 'Hello1234')
re.match('[A-Z0-9]+', 'hello')

- 가-힣

re.match('[가-힣]+', '홍길동')

----- 43.2.4 특정 문자 범위에 포함되지 않는지 판단하기

- [^범위]*
- [^범위]+

re.match('[^A-Z]+', 'Hello')
re.match('[^A-Z]+', 'hello')

- ^[범위]*
- ^[범위]+

re.match('^[A-Z]+', 'Hello')

- [범위]*$
- [범위]+$

re.match('[0-9]+$', 'Hello1234')

----- 43.2.5 특수 문자 판단하기

- \특수문자 # [] 안에서는 \ 붙이지 않아도 됨.

re.search('\*+', '1 ** 2')
re.match('[$()a-zA-Z0-9]+', '$(document)')


- \d = [0-9] : 모든 숫자
- \D = [^0-9] : 숫자를 제외한 모든 문자
- \w = [a-zA-Z0-9_] : 영문 대소문자, 숫자, 밑줄 문자
- \W = [^a-zA-Z0-9_] : 영문 대소문자, 숫자, 밑줄 문자를 제외한 모든 문자

re.match('\d+', '1234')
re.match('\D+', 'Hello')
re.match('\w+', 'Hello_1234')
re.match('\W+', '(:)')

----- 43.2.6 공백 처리하기

- \s = [\t\n\r\f\v] : 공백을 포함
- \S = [^\t\n\r\f\v] : 공백을 제외
- ' '

re.match('[a-zA-Z0-9 ]+', 'Hello 1234')
re.match('[a-zA-Z0-9\s]+', 'Hello 1234')


----- 43.3 그룹 사용하기

- (정규표현식)(정규표현식)
- 매치객체.group(그룹숫자)

m = re.match('([0-9+]) ([0-9]+)', '10 295')
m.group(1)
m.group(2)
m.group()
m.group(0)

- 매치객체.groups() # 각 그룹에 해당하는 문자열을 튜플 형태로 반환
- (?P<이름>정규표현식)
- 매치객체.group('그룹이름')

----- 43.3.1 패턴에 매칭되는 모든 문자열 가져오기
: 패턴에 매칭되는 모든 문자열 리스트로 반환

- re.findall('패턴', '문자열')

re.findall('[0-9]+', '1 2 Fizz 4 Buzz Fizz 7 8')

----- 43.4 문자열 바꾸기

re.sub('패턴', '바꿀문자열', '문자열', 바꿀횟수)
re.sub('패턴', 교체함수, '문자열', 바꿀횟수)

----- 43.4.1 찾은 문자열을 결과에 다시 사용하기

