----- 32.1 lambda expression
def plus_ten(x):
    return x + 10

plus_ten(1)

----- 

plus_ten = lambda x: x + 10
plus_ten(1)


----- 32.1.1
(lambda x: x + 10)(1)


----- 32.1.2 람다 표현식 안에서는 변수를 만들 수 없다.
(lambda x: y = 10; x + y)(1) # (X)

y = 10
(lambda x: x + y)(1) # (O)


----- 32.1.3 람다 표현식을 인수로 사용하기
def plus_ten(x):
    return x + 10

list(map(plus_ten, [1, 2, 3]))

-----

list(map(lambda x: x + 10, [1, 2, 3]))

----- 람다 표현식으로 매개변수가 없는 함수 만들기

(lambda : 1)()

x = 10
(lambda : x)()



----- 32.2 람다 표현식과 map, filter, reduce 함수 활용하기

----- 32.2.1 람다 표현식에 조건부 표현식 사용하기

- lambda 매개변수들: 식1 if 조건식 else 식2

a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
list(map(lambda x: str(x) if x % 3 == 0 else x, a))


----- 32.2.2 map에 객체를 여러 개 넣기

a = [1, 2, 3, 4, 5]
b = [2, 4, 6, 8, 10]
list(map(lambda x, y: x * y, a, b))


----- 32.2.3 filter 사용하기

- filter(함수, 반복가능한객체)

def f(x):
    return x > 5 and x < 10

a = [8, 3, 2, 10, 15,7, 1, 9, 0, 11]
list(filter(f, a))

-----

a = [8, 3, 2, 10, 15,7, 1, 9, 0, 11]
list(filter(lambda x: x > 5 and x < 10, a))


----- 32.2.4 reduce 사용하기

def f(x, y):
    return x + y

a = [1, 2, 3, 4, 5]

from functools import reduce
reduce(f, a)

-----

a = [1, 2, 3, 4, 5]

from functools import reduce
reduce(lambda x, y: x + y, a)

-----