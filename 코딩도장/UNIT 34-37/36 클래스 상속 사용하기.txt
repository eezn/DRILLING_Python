----- 36.1 사람 클래스로 학생 클래스 만들기

class 기반클래스이름:
    코드

class 파생클래스이름(기반클래스이름):
    코드


class Person:
    def greeting(self):
        print('안녕하세요.')

class Student(Person):
    def study(self):
        print('공부하기')

james = Student()
james.greeting()
james.study()



- issubclass(파생클래스, 기반클래스)

issubclass(Student, Person)


----- 36.2 상속 관계와 포함 관계 알아보기

----- 36.2.1 상속 관계 (is-a)

class Person:
    def greeting(self):
        print('안녕하세요.')

class Student(Person):
    def study(self):
        print('공부하기')

----- 36.2.2 포함 관계 (has-a)

class Person:
    def greeting(self):
        print('안녕하세요.')

class PersonList:
    def __init__(self):
        self.person_list = []

    def append_person(self, person):
        self.person_list.append(person)


----- 36.3 기반 클래스의 속성 사용하기

class Person:
    def __init__(self):
        print('Person __init__')
        self.hello = '안녕하세요.'

class Student(Person):
    def __init__(self):
        print('Student __init__')
        self.school = '파이썬 코딩 도장'

james = Student()
print(james.school)
print(james.hello) 

# Person의 __init__ 메서드가 호출되지 않으면 
# self.hello = '안녕하세요.'도 실행되지 않아서 속성이 만들어지지 않습니다.


----- 36.3.1 super()로 기반 클래스 초기화하기

- super().메서드()

class Person:
    def __init__(self):
        print('Person __init__')
        self.hello = '안녕하세요.'

class Student(Person):
    def __init__(self):
        print('Student __init__')
        super().__init__()                       # <- 여기
        self.school = '파이썬 코딩 도장'

james = Student()
print(james.school)
print(james.hello)


----- 36.3.2 기반 클래스를 초기화하지 않아도 되는 경우



----- 36.4 메서드 오버라이딩

class Person:
    def greeting(self):
        print('안녕하세요.')

class Student(Person):
    def greeting(self):
        print('안녕하세요. 저는 파이썬 코딩 도장 학생입니다.')

james = Student()
james.greeting()

-----

class Person:
    def greeting(self):
        print('안녕하세요.')

class Student(Person):
    def greeting(self):
        super().greeting()
        print('저는 파이썬 코딩 도장 학생입니다.')

james = Student()
james.greeting()



----- 36.5 다중 상속 사용하기

class 기반클래스이름1:
    코드

class 기반클래스이름2:
    코드

class 파생클래스이름(기반클래스이름1, 기반클래스이름2):


class Person:
    def greeting(self):
        print('안녕하세요.')

class University:
    def manage_credit(self):
        print('학점 관리')

class Undergraduate(Person, University):
    def study(self):
        print('공부하기')

james = Undergraduate()
james.greeting()
james.manage_credit()
james.study()



----- 36.5.1 다이아몬드 상속

class A:
    greeting(self):
        print('안녕하세요. A입니다.')

class B(A):
    greeting(self):
        print('안녕하세요. B입니다.')

class C(A):
    greeting(self):
        print('안녕하세요. C입니다.')

class D(B, C):
    pass


x = D()
x.greeting() # 안녕하세요. B입니다.

----- 36.5.2 메서드 탐색 순서 확인하기

Method Resolution Order, MRO

- 클래스.mro()



----- 36.6 추상 클래스 사용하기

from abc import *

class 추상클래스이름(metaclass=ABCMeta):
    @abstractmethod
    def 메서드이름(self):
        코드


from abc import *

class StudentBase(metaclass=ABCMeta):
    @abstractmethod
    def study(self):
        pass

    @abstractmethod
    def go_to_school(self):
        pass

class Student(StudentBase):
    def study(self):
        print('공부하기')

    def go_to_school(self):
        print('학교가기')


james = Student()
james.study()
james.go_to_school()